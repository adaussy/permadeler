<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:filter="http://www.eclipse.org/sirius/diagram/description/filter/1.1.0" xmlns:properties="http://www.eclipse.org/sirius/properties/1.0.0" xmlns:properties-ext-widgets-reference="http://www.eclipse.org/sirius/properties/1.0.0/ext/widgets/reference" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" name="model" version="12.0.0.2017041100">
  <ownedViewpoints name="FoodForestViewPoint" modelFileExtension="*.Permadeler">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@toolSections.1/@ownedTools[name='PMD_CreatePlantationFromType']" name="FoodForestMapDiagram" label="Carte Implantation Foret Jardin" titleExpression="aql:'Carte Implantation'" initialisation="true" showOnStartup="true" domainClass="Permadeler::PlantationPhase" enablePopupBars="true" imagePath="/fr.adaussy.permadeler.model.design/img/plan.png">
      <filters xsi:type="filter:CompositeFilterDescription" name="PMD_TopLayer" label="Cacher les strates hausse (Canopée, Sous Canopée)">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']" semanticConditionExpression="aql:self.currentLayer != Permadeler::Layer::CANOPY and self.currentLayer != Permadeler::Layer::UNDERSTORY"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="PMD_TopLayer" label="Cacher les strates moyenne (Arbuste, Liane)">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']" semanticConditionExpression="aql:self.currentLayer != Permadeler::Layer::VINE and self.currentLayer != Permadeler::Layer::SHRUB"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="PMD_TopLayer" label="Cacher les strates basse (Herbacées, Sous Sol, Couvre Sol)">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']" semanticConditionExpression="aql:self.currentLayer != Permadeler::Layer::GROUND_COVER and self.currentLayer != Permadeler::Layer::ROOT and self.currentLayer != Permadeler::Layer::HERB"/>
      </filters>
      <defaultLayer name="Default">
        <nodeMappings name="PMD_Plantation" label="Plantation" semanticCandidatesExpression="aql:self.plantations" doubleClickDescription="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@toolSections.3/@ownedTools[name='PlantationDoubleClicTool']" domainClass="Permadeler::Plantation" dropDescriptions="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@toolSections.1/@ownedTools[name='PMD_CreatePlantationFromType']">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="12" showIcon="false" labelExpression="aql:self.getPlantationLabel()" labelColor="//@userColorsPalettes[name='DiagramColors']/@entries[name='LabelGray']" tooltipExpression="aql:self.getLabelProviderText()" sizeComputationExpression="aql:self.getSVGSize()" labelPosition="node" resizeKind="NSEW" workspacePath="/fr.adaussy.permadeler.model.design/img/understory.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <labelFormat>bold</labelFormat>
          </style>
          <conditionnalStyles predicateExpression="aql:self.wireframe">
            <style xsi:type="style:WorkspaceImageDescription" labelSize="12" showIcon="false" labelExpression="aql:self.getPlantationLabel()" labelColor="//@userColorsPalettes[name='DiagramColors']/@entries[name='LabelLightGray']" tooltipExpression="aql:self.type.name" sizeComputationExpression="aql:self.getSVGSize()" labelPosition="node" resizeKind="NSEW" workspacePath="/fr.adaussy.permadeler.model.design/img/understory.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="CI_DiagSizeMarker" semanticCandidatesExpression="aql:self" synchronizationLock="true" domainClass="Permadeler::PlantationPhase">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="1" showIcon="false" labelExpression="" tooltipExpression="Marqueur de fin de plan" hideLabelByDefault="true" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/fr.adaussy.permadeler.model.design/img/EndDiagMarker.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <toolSections name="CreationSection_Plantations" label="Create">
          <ownedTools xsi:type="tool:NodeCreationDescription" name="PMD_PlantationCreationTool" label="Planter plante Connue" nodeMappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']" iconPath="/fr.adaussy.permadeler.model.edit/icons/other/icons/019-trowel.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createPlantation()"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="PMD_PlantationCreationToolNewPlant" label="Planter nouvelle espece" nodeMappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']" iconPath="/fr.adaussy.permadeler.model.edit/icons/custo/commons/species.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createDefaultSpecies()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Nouvelle Espece">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="NewSpeciesDialog_Page" labelExpression="Plante" domainClass="Permadeler::Plant" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.2 //@extensions.0/@categories.0/@groups.1 //@extensions.0/@categories.0/@groups.3 //@extensions.0/@categories.0/@groups.8 //@extensions.0/@categories.0/@groups.14 //@extensions.0/@categories.0/@groups.13 //@extensions.0/@categories.0/@groups.7 //@extensions.0/@categories.0/@groups.9 //@extensions.0/@categories.0/@groups.10 //@extensions.0/@categories.0/@groups.0"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createPlantation(self)"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="PMD_PlantationCreationToolNewVariety" label="Planter nouvelle variété" nodeMappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']" iconPath="/fr.adaussy.permadeler.model.edit/icons/custo/commons/plant.png">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createDefaultVariety()">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Nouvelle variety">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Default Page" labelExpression="Plante" domainClass="Permadeler::Plant" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@toolSections.0/@ownedTools[name='PMD_PlantationCreationToolNewVariety']/@initialOperation/@firstModelOperations/@subModelOperations.0/@groups.0 //@extensions.0/@categories.0/@groups.3 //@extensions.0/@categories.0/@groups.14 //@extensions.0/@categories.0/@groups.13 //@extensions.0/@categories.0/@groups.0"/>
                  <groups name="LatinNameGroup_NewPlant" labelExpression="aql:'Latin Name'" domainClass="Permadeler::Plant" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.0/@groups.2"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createPlantation(self)"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="DuplicatePlantation" label="Dupliquer" iconPath="/fr.adaussy.permadeler.model.design/img/copy_edit.png">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dupplicate(elementView,diagram)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="DndToolPlantationsPlantations">
          <ownedTools xsi:type="tool:ContainerDropDescription" name="PMD_CreatePlantationFromType" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.printVariables()">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newSemanticContainer.createPlantation(element)"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="MenusPlantation">
          <ownedTools xsi:type="tool_1:PopupMenu" name="BackgroundImageMenu" label="Image de fond">
            <menuItemDescription xsi:type="tool_1:OperationAction" name="DefineBackGroundImage" label="Définir un image de fond">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.defineBackGroundImage(diagram)"/>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="CalibrateBackGroundImage" label="Calibrer l'image de fond">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.calibrateBackgroundImage(diagram)"/>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
        </toolSections>
        <toolSections name="PMD_View" label="Affichage Arbre">
          <ownedTools xsi:type="tool_1:ToolDescription" name="PMD_TopLayerToBack" label="Mode fil de fer" iconPath="/fr.adaussy.permadeler.model.design/img/canope-wireframe.png">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.activateTopLayerWireFrameMode()"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="PMD_TopLayerToFront" label="Mode plein" iconPath="/fr.adaussy.permadeler.model.design/img/canope-full.png">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.deActivateTopLayerWireFrameMode()"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DoubleClickDescription" name="PlantationDoubleClicTool" mappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.showInKnowledgeBase()"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']/@style //@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']/@conditionnalStyles.0/@style" attributeName="workspacePath" value="service:getSVGPath()"/>
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']/@style //@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']/@conditionnalStyles.0/@style" attributeName="labelSize" value="aql:self.getLabelSize()"/>
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']/@style" attributeName="labelPosition" value="aql:self.getLabelPosition()"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@toolSections.0/@ownedTools[name='MoveTray']" name="NursaryDiag" domainClass="Permadeler::Nursary" enablePopupBars="true">
      <metamodel href="../../fr.adaussy.permadeler.model/model/Permadeler.ecore#/"/>
      <defaultLayer name="Default">
        <containerMappings name="TrayContainer" deletionDescription="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@toolSections.0/@ownedTools[name='EmptyCellTool']" semanticCandidatesExpression="aql:self.trays" domainClass="Permadeler::Tray" childrenPresentation="VerticalStack">
          <subContainerMappings name="RowContainer" deletionDescription="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@toolSections.0/@ownedTools[name='EmptyCellTool']" semanticCandidatesExpression="feature:eAllContents" domainClass="Permadeler::Row" childrenPresentation="HorizontalStack">
            <subContainerMappings name="CellNode4" deletionDescription="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@toolSections.0/@ownedTools[name='EmptyCellTool']" semanticCandidatesExpression="feature:eAllContents" domainClass="Permadeler::Cell">
              <style xsi:type="style:WorkspaceImageDescription" labelSize="22" showIcon="false" labelExpression="aql:self.name" tooltipExpression="aql:self.getCellToolTip()" sizeComputationExpression="1" labelPosition="node" resizeKind="NSEW" workspacePath="/fr.adaussy.permadeler.model.edit/icons/other/072-seed.svg">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </subContainerMappings>
            <style xsi:type="style:FlatContainerStyleDescription" labelSize="12" showIcon="false" labelExpression="" hideLabelByDefault="true">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="2" labelSize="12" showIcon="false" labelExpression="" hideLabelByDefault="true">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </containerMappings>
        <containerMappings name="TrayZone" semanticCandidatesExpression="aql:self.zones" domainClass="Permadeler::TrayZone" dropDescriptions="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@toolSections.0/@ownedTools[name='MoveTray']" reusedContainerMappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@containerMappings[name='TrayContainer']">
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelSize="12" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </containerMappings>
        <toolSections name="CreationToolNursary">
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="TrayCreationTool" label="Create tray" containerMappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@containerMappings[name='TrayContainer']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::Tray" referenceName="trays">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.createTray()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="Create Zone" label="Create Zone" containerMappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@containerMappings[name='TrayContainer']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::TrayZone" referenceName="zones"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="EmptyCellTool">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.emptyCells()"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="MoveTray" mappings="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@containerMappings[name='TrayContainer']" dragSource="BOTH">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="trays" valueExpression="var:element"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='FoodForestMapDiagram']/@defaultLayer/@nodeMappings[name='PMD_Plantation']/@style" attributeName="workspacePath" value="service:getSVGPath()"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
      <additionalLayers name="Labels" activeByDefault="true">
        <nodeMappings name="SpeciesItem" semanticCandidatesExpression="aql:self.eAllContents()->filter(Permadeler::Cell)->select(cell | cell.variety &lt;> null)->collect(cell | cell.species)" domainClass="Permadeler::Plant">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="12" showIcon="false" labelExpression="aql:self.getSpeciesSowLabel()" labelAlignment="LEFT" sizeComputationExpression="5" resizeKind="NSEW" workspacePath="/fr.adaussy.permadeler.model.edit/icons/custo/commons/plant.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="LinkToCell" sourceMapping="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@additionalLayers[name='Labels']/@nodeMappings[name='SpeciesItem']" targetMapping="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@defaultLayer/@containerMappings[name='TrayContainer']/@subContainerMappings[name='RowContainer']/@subContainerMappings[name='CellNode4']" targetFinderExpression="aql:self.getOneCellOfTypeByTray(diagram)">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription labelSize="12">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='FoodForestViewPoint']/@ownedRepresentations[name='NursaryDiag']/@additionalLayers[name='Labels']/@nodeMappings[name='SpeciesItem']/@style" attributeName="workspacePath" value="service:getSVGPath()"/>
          </vsmElementCustomizations>
        </customization>
      </additionalLayers>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.rcp.services.FillService"/>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.rcp.services.MonthService"/>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.rcp.services.LabelService"/>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.rcp.services.ActionsService"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.sirius.ext.emf.edit.EditingDomainServices"/>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.model.design.services.DiagramService"/>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.model.design.services.DateService"/>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.model.design.services.DebugService"/>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.model.design.services.PropertyService"/>
    <ownedJavaExtensions qualifiedClassName="fr.adaussy.permadeler.model.design.services.ValidationService"/>
  </ownedViewpoints>
  <userColorsPalettes name="DiagramColors">
    <entries xsi:type="description:UserFixedColor" red="249" green="235" blue="210" name="AreaBackground"/>
    <entries xsi:type="description:ComputedColor" name="EffectiveColor" red="aql:self.getEffectiveColor().getRed()" green="aql:self.getEffectiveColor().getGreen()" blue="aql:self.getEffectiveColor().getBlue()"/>
    <entries xsi:type="description:UserFixedColor" red="115" green="115" blue="150" name="LabelGray"/>
    <entries xsi:type="description:UserFixedColor" red="167" green="165" blue="165" name="LabelLightGray"/>
  </userColorsPalettes>
  <extensions xsi:type="properties:ViewExtensionDescription" name="Properties">
    <metamodels href="http://www.example.org/fr.adaussy.permadeler.model#/"/>
    <categories name="Default Category">
      <pages name="PlantPage" labelExpression="Plant" domainClass="Permadeler::Plant" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.3 //@extensions.0/@categories.0/@groups.2 //@extensions.0/@categories.0/@groups.1">
        <actions imageExpression="/fr.adaussy.permadeler.model.design/img/image.gif">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::Image" referenceName="images">
                <subModelOperations xsi:type="tool_1:Let" variableName="parent" valueExpression="aql:self"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:instance">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="title" valueExpression="aql:self.eContainer().eGet('name')"/>
                  <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Image URL">
                    <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                      <initialOperation/>
                    </buttons>
                    <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                      <initialOperation/>
                    </buttons>
                    <page name="Default Page" labelExpression="Web URL" domainClass="Permadeler::Image" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@pages.0/@actions.0/@initialOperation/@firstModelOperations/@subModelOperations.0/@subModelOperations.1/@subModelOperations.1/@groups.0"/>
                    <groups name="Default Group" labelExpression="Group" domainClass="Permadeler::Image" semanticCandidateExpression="var:self">
                      <controls xsi:type="properties:TextDescription" name="Permadeler::Image title" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('title')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('title'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('title').changeable" valueExpression="aql:self.title">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:SetValue" featureName="title" valueExpression="var:newValue"/>
                        </initialOperation>
                      </controls>
                      <controls xsi:type="properties:TextDescription" name="Permadeler::Image source" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('source')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('source'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('source').changeable" valueExpression="aql:self.source">
                        <initialOperation>
                          <firstModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:newValue"/>
                        </initialOperation>
                      </controls>
                    </groups>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="path" valueExpression="aql:'images/'+self.title+self.source.getUrlFileExtension()"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.downloadImage(instance)"/>
              </subModelOperations>
            </firstModelOperations>
          </initialOperation>
        </actions>
      </pages>
      <pages name="PlantProperty" labelExpression="Charactéristiques Especes" domainClass="Permadeler::Species" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.8 //@extensions.0/@categories.0/@groups.9 //@extensions.0/@categories.0/@groups.10 //@extensions.0/@categories.0/@groups.7" indented="true"/>
      <pages name="ZonePage" labelExpression="Zone" domainClass="Permadeler::Zone" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.4"/>
      <pages name="PlantationPage" labelExpression="Plantation" domainClass="Permadeler::Plantation" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.5"/>
      <pages name="SeedItem_Main" labelExpression="aql:'Seed item'" domainClass="Permadeler::SeedItem" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.6"/>
      <pages name="ReferencePage" labelExpression="Reference" domainClass="Permadeler::ReferencingElement" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.0" indented="true"/>
      <pages name="Plantation_Species" labelExpression="aql:self.name" domainClass="Permadeler::Plant" semanticCandidateExpression="aql:Sequence{self.type,self.type.species}" preconditionExpression="aql:self.oclIsKindOf(Permadeler::Plantation)" groups="//@extensions.0/@categories.0/@groups.2 //@extensions.0/@categories.0/@groups.1 //@extensions.0/@categories.0/@groups.3 //@extensions.0/@categories.0/@groups.9 //@extensions.0/@categories.0/@groups.10 //@extensions.0/@categories.0/@groups.7"/>
      <pages name="ActionsPage" labelExpression="Actions" domainClass="Permadeler::Plant" semanticCandidateExpression="aql:self" groups="//@extensions.0/@categories.0/@groups.13" indented="true">
        <actions tooltipExpression="Créer une nouvelle action" imageExpression="/fr.adaussy.permadeler.model.design/img/add_obj.png">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::Action" referenceName="actions"/>
            </firstModelOperations>
          </initialOperation>
        </actions>
      </pages>
      <pages name="ActionPage" labelExpression="Action" domainClass="Permadeler::Action" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.11"/>
      <pages name="ProductionsPage" labelExpression="Productions" domainClass="Permadeler::Plant" semanticCandidateExpression="aql:self" groups="//@extensions.0/@categories.0/@groups.14" indented="true">
        <actions tooltipExpression="Créer une nouvelle production" imageExpression="/fr.adaussy.permadeler.model.design/img/add_obj.png">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::Production" referenceName="productions"/>
            </firstModelOperations>
          </initialOperation>
        </actions>
      </pages>
      <pages name="ProductionPage" labelExpression="Production" domainClass="Permadeler::Production" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.12"/>
      <pages name="PlantationProduction" labelExpression="Plant Production" domainClass="Permadeler::Plantation" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.18" indented="true">
        <actions tooltipExpression="Créer une nouvelle production" imageExpression="/fr.adaussy.permadeler.model.design/img/add_obj.png">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.type">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::Production" referenceName="productions"/>
            </firstModelOperations>
          </initialOperation>
        </actions>
      </pages>
      <pages name="PlantationActions" labelExpression="Plant Actions" domainClass="Permadeler::Plantation" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.17" indented="true">
        <actions tooltipExpression="Créer une nouvelle action" imageExpression="/fr.adaussy.permadeler.model.design/img/add_obj.png">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.type">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::Action" referenceName="actions"/>
            </firstModelOperations>
          </initialOperation>
        </actions>
      </pages>
      <pages name="Plantation_TypeReferences" labelExpression="Plant references" domainClass="Permadeler::Plantation" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.0" indented="true"/>
      <pages name="RootPage" labelExpression="Projet" domainClass="Permadeler::Root" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.15"/>
      <pages name="PlantationPhaseGroup" labelExpression="Plantation Phase" domainClass="Permadeler::PlantationPhase" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.16"/>
      <groups name="ReferenceGroup" labelExpression="References" domainClass="Permadeler::ReferencingElement" semanticCandidateExpression="aql:Sequence{self,self.type}">
        <controls xsi:type="properties:ListDescription" name="Permadeler::ReferencingElement references" labelExpression="References" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('references'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('references').changeable" valueExpression="aql:self.references" displayExpression="var:value">
          <actions imageExpression="/fr.adaussy.permadeler.rcp/icons/add.gif">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.addReference()"/>
            </initialOperation>
          </actions>
          <actions imageExpression="/fr.adaussy.permadeler.model.design/img/delete.png">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.removeReference(selection)"/>
            </initialOperation>
          </actions>
        </controls>
        <actions tooltipExpression="Open in navigator">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.link.toString().openInBrowser()"/>
          </initialOperation>
        </actions>
      </groups>
      <groups name="Species_Latin_Group" labelExpression="Nom Latin" domainClass="Permadeler::Species" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:ContainerDescription" name="LatinName_Container">
          <controls xsi:type="properties:TextDescription" name="Species_Genus_Widget" labelExpression="Genre" isEnabledExpression="aql:true" valueExpression="aql:self.genus">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="genus" valueExpression="var:newValue"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:TextDescription" name="Species_Species" labelExpression="Espece" isEnabledExpression="aql:true" valueExpression="aql:self.species">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="species" valueExpression="var:newValue"/>
            </initialOperation>
          </controls>
          <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="2"/>
        </controls>
        <controls xsi:type="properties:TextDescription" name="Permadeler::Genus latinName" labelExpression="Nom Latin" isEnabledExpression="aql:false" valueExpression="aql:self.getFullLatinName()">
          <initialOperation/>
        </controls>
        <validationSet>
          <semanticValidationRules name="DupplicatedSpecies_Warning" level="WARNING" message="Cette espece existe déjà dans votre base de connaissance" targetClass="Permadeler::Species">
            <audits auditExpression="aql:self.validateUniqueLatinName()"/>
          </semanticValidationRules>
        </validationSet>
      </groups>
      <groups name="Variety_Latin_Group" labelExpression="Nom Latin" domainClass="Permadeler::Variety" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="Variety_Variety_Widget" labelExpression="Variété" isEnabledExpression="aql:true" valueExpression="aql:self.variety">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="variety" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="Permadeler::Genus latinName" labelExpression="Nom Latin" isEnabledExpression="aql:false" valueExpression="aql:self.getFullLatinName()">
          <initialOperation/>
        </controls>
        <validationSet>
          <semanticValidationRules name="DupplicatedSpecies_Warning" level="WARNING" message="Cette espece existe déjà dans votre base de connaissance" targetClass="Permadeler::Species">
            <audits auditExpression="aql:self.validateUniqueLatinName()"/>
          </semanticValidationRules>
        </validationSet>
      </groups>
      <groups name="Plante_Group" labelExpression="Nom de plante" domainClass="Permadeler::Plant" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="Plant_Name" labelExpression="Nom" helpExpression="Nom de la plante (Utilisé des Majuscule comme première lettre de chaque mot)" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:Let" variableName="updateShortName" valueExpression="aql:self.shortName = null or self.generateShortName() = self.shortName"/>
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
              <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:updateShortName">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="shortName" valueExpression="aql:self.generateShortName()"/>
              </subModelOperations>
            </firstModelOperations>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="Permadeler::Genus description" labelExpression="Description" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="Permadeler::Plant shortName" labelExpression="Nom court" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('shortName'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('shortName').changeable" valueExpression="aql:self.shortName">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="shortName" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ListDescription" name="Permadeler::Genus commonNames" labelExpression="Noms Communs" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('commonNames'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('commonNames').changeable" valueExpression="aql:self.commonNames" displayExpression="var:value">
          <actions labelExpression="Add">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.addSeveralStrings('commonNames','Enter common names (use , to enter multiple value)',',')"/>
            </initialOperation>
          </actions>
          <actions labelExpression="Delete">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eRemoveAll('commonNames',selection)"/>
            </initialOperation>
          </actions>
          <conditionalStyles preconditionExpression="aql:self.eClass().getEStructuralFeature('commonNames').lowerBound = 1">
            <style>
              <labelFontFormat>bold</labelFontFormat>
            </style>
          </conditionalStyles>
        </controls>
        <controls xsi:type="properties:ButtonDescription" name="Plant_IconKey" labelExpression="Icon :" buttonLabelExpression="aql:self.iconKey">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.selectImage()"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ButtonDescription" name="Plant_RepresentationKey" labelExpression="Representation image" buttonLabelExpression="aql:self.representationKey">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.selectRepresentation()"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="NamedElement" labelExpression="Info" domainClass="Permadeler::NamedElement" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="Permadeler::NamedElement name" labelExpression="Nom" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="PlantNamed_DescriptionWidget" labelExpression="Description" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="PlantationGroup" labelExpression="Plantation" domainClass="Permadeler::Plantation" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="Permadeler::Plantation id" labelExpression="Id" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('id'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('id').changeable" valueExpression="aql:self.id">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="id" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="Permadeler::Plantation description" labelExpression="Description" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="PlantationDate" labelExpression="Date de plantation" valueExpression="aql:self.plantationDate.toLocalDate()">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.setPlantationDate(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Plantation currentLayer" label="Current Layer" labelExpression="Strate Courrante" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('currentLayer'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('currentLayer').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('currentLayer').eType.getEEnumLiteralByLiteral(self.currentLayer.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('currentLayer').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="8">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="currentLayer" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Plantation representationKind" labelExpression="Type de representation dans diagramme :" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('representationKind'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('representationKind').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('representationKind').eType.getEEnumLiteralByLiteral(self.representationKind.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('representationKind').eType.eLiterals" candidateDisplayExpression="aql:candidate.name" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="representationKind" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="Permadeler::Tree rootstock" labelExpression="Porte Greffe" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('rootstock'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('rootstock').changeable" valueExpression="aql:self.rootstock">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="rootstock" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="Permadeler::Plantation wireframe" labelExpression="Mode fils de fer" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('wireframe'))" isEnabledExpression="aql:self.currentLayer == Permadeler::Layer::CANOPY or self.currentLayer == Permadeler::Layer::UNDERSTORY" valueExpression="aql:self.wireframe">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="wireframe" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-ext-widgets-reference:ExtReferenceDescription" name="Permadeler::Plantation type" referenceNameExpression="aql:'type'"/>
      </groups>
      <groups name="SeedItem" labelExpression="Info" domainClass="Permadeler::SeedItem" semanticCandidateExpression="var:self">
        <controls xsi:type="properties-ext-widgets-reference:ExtReferenceDescription" name="Permadeler::SeedItem type" referenceNameExpression="aql:'type'"/>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::SeedItem quantity" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('quantity')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('quantity'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('quantity').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('quantity').eType.getEEnumLiteralByLiteral(self.quantity.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('quantity').eType.eLiterals" candidateDisplayExpression="aql:candidate.name" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="quantity" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="Permadeler::SeedItem byDate" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('byDate')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('byDate'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('byDate').changeable" valueExpression="aql:self.byDate">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="byDate" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="SpeciesInterestGroup" labelExpression="Autres intêrets" domainClass="Permadeler::Species" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:ContainerDescription" name="SpecialUsesConditionGroupOwner">
          <controls xsi:type="properties:TextDescription" name="SpecialUsesConditionLabel" isEnabledExpression="aql:false" valueExpression="Roles">
            <initialOperation/>
          </controls>
          <controls xsi:type="properties:ContainerDescription" name="SpecialUsesConditionGroup">
            <controls xsi:type="properties:DynamicMappingForDescription" name="EdiblePartFor" iterator="enum" iterableExpression="aql:self.eClass().getEStructuralFeature('specialUses').eType.eLiterals">
              <ifs name="enum" predicateExpression="aql:true">
                <widget xsi:type="properties:CheckboxDescription" name="SpecialUsesEnumCheckbox" labelExpression="aql:enum.getEditLabel()" valueExpression="aql:self.specialUses->exists(e | e = enum.instance)">
                  <initialOperation>
                    <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.modifyList('specialUses',enum.instance,newValue)"/>
                  </initialOperation>
                </widget>
              </ifs>
            </controls>
            <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="4" makeColumnsWithEqualWidth="true"/>
          </controls>
        </controls>
      </groups>
      <groups name="SpeciesMainCaractGroup" labelExpression="Charactéristiques de la plante" domainClass="Permadeler::Species" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Species defaultLayer" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('defaultLayer')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('defaultLayer'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('defaultLayer').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('defaultLayer').eType.getEEnumLiteralByLiteral(self.defaultLayer.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('defaultLayer').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="defaultLayer" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Species defaultRepresentationKind" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('defaultRepresentationKind')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('defaultRepresentationKind'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('defaultRepresentationKind').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('defaultRepresentationKind').eType.getEEnumLiteralByLiteral(self.defaultRepresentationKind.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('defaultRepresentationKind').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="defaultRepresentationKind" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Plant lifeCycle" labelExpression="Cycle de vie" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('lifeCycle'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lifeCycle').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('lifeCycle').eType.getEEnumLiteralByLiteral(self.lifeCycle.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('lifeCycle').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="4">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="lifeCycle" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="SpeciesCaractGroup" labelExpression="Charactéristiques avancées de la plante" domainClass="Permadeler::Species" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:SelectDescription" name="Familly" labelExpression="Famille" valueExpression="aql:self.eClass().getEStructuralFeature('family').eType.getEEnumLiteralByLiteral(self.family.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('family').eType.eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="family" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ContainerDescription" name="DimensionOwner">
          <controls xsi:type="properties:TextDescription" name="Permadeler::Species height" labelExpression="Hauteur(m)" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('height'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('height').changeable" valueExpression="aql:self.height.getTextRep()">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="height" valueExpression="var:newValue"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:TextDescription" name="Permadeler::Species width" labelExpression="Largeur(m)" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('width'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('width').changeable" valueExpression="aql:self.width.getTextRep()">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="width" valueExpression="var:newValue"/>
            </initialOperation>
          </controls>
          <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="2" makeColumnsWithEqualWidth="true"/>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Plant foilageShade" labelExpression="Ombrage du feuillage" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('foilageShade'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('foilageShade').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('foilageShade').eType.getEEnumLiteralByLiteral(self.foilageShade.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('foilageShade').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="foilageShade" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Plant foilageType" labelExpression="Feuillage" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('foilageType'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('foilageType').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('foilageType').eType.getEEnumLiteralByLiteral(self.foilageType.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('foilageType').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="foilageType" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Plant rootType" labelExpression="Tendance Racinaires" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('rootType'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('rootType').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('rootType').eType.getEEnumLiteralByLiteral(self.rootType.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('rootType').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="rootType" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Species growRate" labelExpression="Croissance" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('growRate'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('growRate').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('growRate').eType.getEEnumLiteralByLiteral(self.growRate.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('growRate').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="4">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="growRate" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <style/>
      </groups>
      <groups name="SpeciesEnvGroup" labelExpression="Environnement de plantation" domainClass="Permadeler::Species" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:ContainerDescription" name="LightingConditionGroupOwner">
          <controls xsi:type="properties:TextDescription" name="LightingConditionLabel" isEnabledExpression="aql:false" valueExpression="Exposition">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:ContainerDescription" name="LightingConditionGroup">
            <controls xsi:type="properties:DynamicMappingForDescription" name="lightingConditionFor" iterator="enum" iterableExpression="aql:self.eClass().getEStructuralFeature('lightingCondition').eType.eLiterals">
              <ifs name="enum" predicateExpression="aql:true">
                <widget xsi:type="properties:CheckboxDescription" name="LightningEnumCheckbox" labelExpression="aql:enum.getEditLabel()" valueExpression="aql:self.lightingCondition->exists(e | e = enum.instance)">
                  <initialOperation>
                    <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.modifyList('lightingCondition',enum.instance,newValue)"/>
                  </initialOperation>
                </widget>
              </ifs>
            </controls>
            <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="4" makeColumnsWithEqualWidth="true"/>
          </controls>
        </controls>
        <controls xsi:type="properties:ContainerDescription" name="ToleratedLightingConditionGroupOwner">
          <controls xsi:type="properties:TextDescription" name="ToleratedLightingConditionLabel" isEnabledExpression="aql:false" valueExpression="Exposition Tolérée">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:ContainerDescription" name="ToleratedLightingConditionGroup">
            <controls xsi:type="properties:DynamicMappingForDescription" name="lightingConditionFor" iterator="enum" iterableExpression="aql:self.eClass().getEStructuralFeature('toleratedLightingCondition').eType.eLiterals">
              <ifs name="enum" predicateExpression="aql:true">
                <widget xsi:type="properties:CheckboxDescription" name="ToleratedLightningEnumCheckbox" labelExpression="aql:enum.getEditLabel()" valueExpression="aql:self.toleratedLightingCondition->exists(e | e = enum.instance)">
                  <initialOperation>
                    <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.modifyList('toleratedLightingCondition',enum.instance,newValue)"/>
                  </initialOperation>
                </widget>
              </ifs>
            </controls>
            <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="4" makeColumnsWithEqualWidth="true"/>
          </controls>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Plant droughtTolerance" labelExpression="Résistance à la secheresse" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('droughtTolerance'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('droughtTolerance').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('droughtTolerance').eType.getEEnumLiteralByLiteral(self.droughtTolerance.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('droughtTolerance').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="droughtTolerance" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ContainerDescription" name="MoistureGroupOwner">
          <controls xsi:type="properties:TextDescription" name="MoistureLabel" isEnabledExpression="aql:false" valueExpression="Tolerance humidité">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:ContainerDescription" name="MoistureGroup">
            <controls xsi:type="properties:DynamicMappingForDescription" name="moistureFor" iterator="enum" iterableExpression="aql:self.eClass().getEStructuralFeature('moisture').eType.eLiterals">
              <ifs name="enum" predicateExpression="aql:true">
                <widget xsi:type="properties:CheckboxDescription" name="MoistureCheckbox" labelExpression="aql:enum.getEditLabel()" valueExpression="aql:self.moisture->exists(e | e = enum.instance)">
                  <initialOperation>
                    <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.modifyList('moisture',enum.instance,newValue)"/>
                  </initialOperation>
                </widget>
              </ifs>
            </controls>
            <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="4" makeColumnsWithEqualWidth="true"/>
          </controls>
        </controls>
        <controls xsi:type="properties:ContainerDescription" name="WindOwner">
          <controls xsi:type="properties:TextDescription" name="WindLabel" isEnabledExpression="aql:false" valueExpression="Tolerance au vent">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:ContainerDescription" name="WindGroup">
            <controls xsi:type="properties:DynamicMappingForDescription" name="windFor" iterator="enum" iterableExpression="aql:self.eClass().getEStructuralFeature('wind').eType.eLiterals">
              <ifs name="enum" predicateExpression="aql:true">
                <widget xsi:type="properties:CheckboxDescription" name="WindCheckbox" labelExpression="aql:enum.getEditLabel()" valueExpression="aql:self.wind->exists(e | e = enum.instance)">
                  <initialOperation>
                    <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.modifyList('wind',enum.instance,newValue)"/>
                  </initialOperation>
                </widget>
              </ifs>
            </controls>
            <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="4" makeColumnsWithEqualWidth="true"/>
          </controls>
        </controls>
        <controls xsi:type="properties:ContainerDescription" name="SoilTypeGroupOwner" label="Type de sol">
          <controls xsi:type="properties:TextDescription" name="SoilTypeLabel" isEnabledExpression="aql:false" valueExpression="Type de sol">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:ContainerDescription" name="SoilTypeGroup">
            <controls xsi:type="properties:DynamicMappingForDescription" name="soilTypeFor" iterator="enum" iterableExpression="aql:self.eClass().getEStructuralFeature('soilType').eType.eLiterals">
              <ifs name="enum" predicateExpression="aql:true">
                <widget xsi:type="properties:CheckboxDescription" name="SoilTypeEnumCheckbox" labelExpression="aql:enum.getEditLabel()" valueExpression="aql:self.soilType->exists(e | e = enum.instance)">
                  <initialOperation>
                    <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.modifyList('soilType',enum.instance,newValue)"/>
                  </initialOperation>
                </widget>
              </ifs>
            </controls>
            <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="4" makeColumnsWithEqualWidth="true"/>
          </controls>
        </controls>
        <controls xsi:type="properties:TextDescription" name="Permadeler::Plant minTemperature" labelExpression="Min Temperature :" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('minTemperature'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('minTemperature').changeable" valueExpression="aql:self.minTemperature">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="minTemperature" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <style/>
      </groups>
      <groups name="ActionGroup" labelExpression="aql:self.getLabelProviderText()" domainClass="Permadeler::Action" semanticCandidateExpression="aql:self.getActions()">
        <controls xsi:type="properties:TextDescription" name="Permadeler::Action name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="PlantNamed_DescriptionWidget" labelExpression="Description" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="Permadeler::Action type" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('type')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('type'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('type').eType.getEEnumLiteralByLiteral(self.type.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('type').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()" numberOfColumns="5">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:newValue.instance"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ListDescription" name="ActionPeriodWidget" labelExpression="Periode" valueExpression="aql:self.getMonths()" displayExpression="var:value">
          <actions labelExpression="Edit">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.editMonthQuarter()"/>
            </initialOperation>
          </actions>
        </controls>
        <actions tooltipExpression="aql:'Supprimer '+self.getLabelProviderText()" imageExpression="/fr.adaussy.permadeler.model.design/img/delete.png">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:RemoveElement"/>
            </firstModelOperations>
          </initialOperation>
        </actions>
      </groups>
      <groups name="ProductionGroup" labelExpression="aql:self.getLabelProviderText()" domainClass="Permadeler::Production" semanticCandidateExpression="aql:self.getProductionsToDisplay()">
        <controls xsi:type="properties:TextDescription" name="Permadeler::Action name" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('name')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ListDescription" name="ProductionPeriodWidget" labelExpression="Periode" valueExpression="aql:self.getMonths()" displayExpression="var:value">
          <actions labelExpression="Edit">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.editMonthQuarter()"/>
            </initialOperation>
          </actions>
        </controls>
        <controls xsi:type="properties:ContainerDescription" name="ProdGroup">
          <controls xsi:type="properties:SelectDescription" name="ProductionType_Select" labelExpression="Type de production" valueExpression="aql:self.eClass().getEStructuralFeature('type').eType.getEEnumLiteralByLiteral(self.type.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('type').eType.eLiterals" candidateDisplayExpression="aql:candidate.getEditLabel()">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:newValue.instance"/>
              </firstModelOperations>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:CheckboxDescription" name="Permadeler::Production eatable" labelExpression="Comestible" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('eatable'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('eatable').changeable" valueExpression="aql:self.eatable">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="eatable" valueExpression="var:newValue"/>
            </initialOperation>
          </controls>
          <controls xsi:type="properties:TextDescription" name="Permadeler::Production conservation" labelExpression="aql:input.emfEditServices(self).getText(self.eClass().getEStructuralFeature('conservation')) + ':'" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('conservation'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('conservation').changeable" valueExpression="aql:self.conservation">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="conservation" valueExpression="var:newValue"/>
            </initialOperation>
          </controls>
          <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="3"/>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="PlantNamed_DescriptionWidget" labelExpression="Description" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('description'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('description').changeable" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <style toggleStyle="TREE_NODE" expandedByDefault="true"/>
        <actions tooltipExpression="aql:'Supprimer '+self.getLabelProviderText()" imageExpression="/fr.adaussy.permadeler.model.design/img/delete.png">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool_1:RemoveElement"/>
            </firstModelOperations>
          </initialOperation>
        </actions>
      </groups>
      <groups name="ActionsGroup" labelExpression="Actions" domainClass="Permadeler::Plant" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:ListDescription" name="PlantActionWidget" labelExpression="Actions" valueExpression="aql:self.getActions()" displayExpression="aql:value.getLabelProviderText()+' : '+value.getTemporalLabel()">
          <onClickOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
          </onClickOperation>
          <actions imageExpression="/fr.adaussy.permadeler.rcp/icons/add.gif">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::Action" referenceName="actions">
                  <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Action">
                    <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                      <initialOperation/>
                    </buttons>
                    <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                      <initialOperation/>
                    </buttons>
                    <page name="Default Page" labelExpression="Page" domainClass="Permadeler::Action" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.11"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </actions>
          <actions imageExpression="/fr.adaussy.permadeler.rcp/icons/edit.png">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->asSequence()->at(1).getActionToEdit(self)">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Action">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Default Page" labelExpression="Page" domainClass="Permadeler::Action" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.11"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </actions>
          <actions imageExpression="/fr.adaussy.permadeler.model.design/img/delete.png">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->asSequence()->at(1).safeDeleteInheritedTemporal(self)"/>
            </initialOperation>
          </actions>
        </controls>
      </groups>
      <groups name="ProductionsGroup" labelExpression="Productions" domainClass="Permadeler::Plant" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:ListDescription" name="PlantProductionsWidget" labelExpression="Productions" valueExpression="aql:self.getProductionsToDisplay()" displayExpression="aql:value.getLabelProviderText()+' : '+value.getTemporalLabel()">
          <onClickOperation>
            <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
          </onClickOperation>
          <actions imageExpression="/fr.adaussy.permadeler.rcp/icons/add.gif">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Permadeler::Production" referenceName="productions">
                  <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Production">
                    <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                      <initialOperation/>
                    </buttons>
                    <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                      <initialOperation/>
                    </buttons>
                    <page name="Default Page" labelExpression="Page" domainClass="Permadeler::Production" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.12"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </actions>
          <actions imageExpression="/fr.adaussy.permadeler.rcp/icons/edit.png">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->asSequence()->at(1).getProductionToEdit(self)">
                <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Production">
                  <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                    <initialOperation/>
                  </buttons>
                  <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                    <initialOperation/>
                  </buttons>
                  <page name="Default Page" labelExpression="Page" domainClass="Permadeler::Production" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.12"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </actions>
          <actions imageExpression="/fr.adaussy.permadeler.model.design/img/delete.png">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:selection->asSequence()->at(1).safeDeleteInheritedTemporal(self)"/>
            </initialOperation>
          </actions>
        </controls>
      </groups>
      <groups name="RootGroup" labelExpression="Projet" domainClass="Permadeler::Root" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="Permadeler::Root name" labelExpression="Nom" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="Permadeler::Root description" labelExpression="Description" lineCount="10" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="PlantationPhaseGroup" labelExpression="Plantation Phase" domainClass="Permadeler::PlantationPhase" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="Permadeler::Root name" labelExpression="Nom" helpExpression="aql:input.emfEditServices(self).getDescription(self.eClass().getEStructuralFeature('name'))" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="Permadeler::Root description" labelExpression="Description" lineCount="10" valueExpression="aql:self.description">
          <initialOperation>
            <firstModelOperations xsi:type="tool_1:SetValue" featureName="description" valueExpression="var:newValue"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="PlantationActions" labelExpression="Action" domainClass="Permadeler::Plantation" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.0/@groups.13"/>
      <groups name="PlantationProductions" labelExpression="Production" domainClass="Permadeler::Plantation" semanticCandidateExpression="var:self" extends="//@extensions.0/@categories.0/@groups.14"/>
    </categories>
  </extensions>
</description:Group>
